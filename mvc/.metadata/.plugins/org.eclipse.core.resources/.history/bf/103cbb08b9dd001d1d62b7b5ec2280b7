package com.ust.rest.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ust.rest.repository.ProductRepository;
import com.ust.rest.repository.UserRepository;
import com.ust.rest.resource.Product;
@Service
public class ProductService {
	@Autowired
	ProductRepository productrepository;
	@Autowired
	UserRepository userRepository;
	public Product getProduct(long productId) {
		Optional<Product> optional =productrepository.findById(productId);
		if(optional.isPresent())
			return optional.get();
		else
			return null;
		
	}
//	public Product getProduct(long productId) {
//		return repository.getProduct(productId);
//	}
	public List<Product> getProducts(){
		return productrepository.findAll();
	}
	@Transactional //to wrap a method in a databases transaction.
	//it allow us to use :propagation:isolation:timeout:tead-only:callback 
	public boolean add(Product product) {
		if(validate(product)) {//cannot create dupicate products
		
		return false;
		}
		else {
			productrepository.save(product);
			return true;
		}
	}
	public boolean validate(Product product) {
		if(product.getName().equals("Camera")) {
			return true;
		}
			else {
				return false;
			}
			}
		
	
	public Product updateProduct(Product product) {
		return productrepository.save(product);
	}
	public void deleteProduct(long productId) {
		productrepository.deleteById(productId);
	}
}
